// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: craft.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/codeharik/craft/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CraftServiceName is the fully-qualified name of the CraftService service.
	CraftServiceName = "craft.CraftService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CraftServiceRequestVoteProcedure is the fully-qualified name of the CraftService's RequestVote
	// RPC.
	CraftServiceRequestVoteProcedure = "/craft.CraftService/RequestVote"
	// CraftServiceAppendEntriesProcedure is the fully-qualified name of the CraftService's
	// AppendEntries RPC.
	CraftServiceAppendEntriesProcedure = "/craft.CraftService/AppendEntries"
)

// CraftServiceClient is a client for the craft.CraftService service.
type CraftServiceClient interface {
	RequestVote(context.Context, *connect.Request[api.RequestVoteRequest]) (*connect.Response[api.RequestVoteResponse], error)
	AppendEntries(context.Context, *connect.Request[api.AppendEntriesRequest]) (*connect.Response[api.AppendEntriesResponse], error)
}

// NewCraftServiceClient constructs a client for the craft.CraftService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCraftServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CraftServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	craftServiceMethods := api.File_craft_proto.Services().ByName("CraftService").Methods()
	return &craftServiceClient{
		requestVote: connect.NewClient[api.RequestVoteRequest, api.RequestVoteResponse](
			httpClient,
			baseURL+CraftServiceRequestVoteProcedure,
			connect.WithSchema(craftServiceMethods.ByName("RequestVote")),
			connect.WithClientOptions(opts...),
		),
		appendEntries: connect.NewClient[api.AppendEntriesRequest, api.AppendEntriesResponse](
			httpClient,
			baseURL+CraftServiceAppendEntriesProcedure,
			connect.WithSchema(craftServiceMethods.ByName("AppendEntries")),
			connect.WithClientOptions(opts...),
		),
	}
}

// craftServiceClient implements CraftServiceClient.
type craftServiceClient struct {
	requestVote   *connect.Client[api.RequestVoteRequest, api.RequestVoteResponse]
	appendEntries *connect.Client[api.AppendEntriesRequest, api.AppendEntriesResponse]
}

// RequestVote calls craft.CraftService.RequestVote.
func (c *craftServiceClient) RequestVote(ctx context.Context, req *connect.Request[api.RequestVoteRequest]) (*connect.Response[api.RequestVoteResponse], error) {
	return c.requestVote.CallUnary(ctx, req)
}

// AppendEntries calls craft.CraftService.AppendEntries.
func (c *craftServiceClient) AppendEntries(ctx context.Context, req *connect.Request[api.AppendEntriesRequest]) (*connect.Response[api.AppendEntriesResponse], error) {
	return c.appendEntries.CallUnary(ctx, req)
}

// CraftServiceHandler is an implementation of the craft.CraftService service.
type CraftServiceHandler interface {
	RequestVote(context.Context, *connect.Request[api.RequestVoteRequest]) (*connect.Response[api.RequestVoteResponse], error)
	AppendEntries(context.Context, *connect.Request[api.AppendEntriesRequest]) (*connect.Response[api.AppendEntriesResponse], error)
}

// NewCraftServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCraftServiceHandler(svc CraftServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	craftServiceMethods := api.File_craft_proto.Services().ByName("CraftService").Methods()
	craftServiceRequestVoteHandler := connect.NewUnaryHandler(
		CraftServiceRequestVoteProcedure,
		svc.RequestVote,
		connect.WithSchema(craftServiceMethods.ByName("RequestVote")),
		connect.WithHandlerOptions(opts...),
	)
	craftServiceAppendEntriesHandler := connect.NewUnaryHandler(
		CraftServiceAppendEntriesProcedure,
		svc.AppendEntries,
		connect.WithSchema(craftServiceMethods.ByName("AppendEntries")),
		connect.WithHandlerOptions(opts...),
	)
	return "/craft.CraftService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CraftServiceRequestVoteProcedure:
			craftServiceRequestVoteHandler.ServeHTTP(w, r)
		case CraftServiceAppendEntriesProcedure:
			craftServiceAppendEntriesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCraftServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCraftServiceHandler struct{}

func (UnimplementedCraftServiceHandler) RequestVote(context.Context, *connect.Request[api.RequestVoteRequest]) (*connect.Response[api.RequestVoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("craft.CraftService.RequestVote is not implemented"))
}

func (UnimplementedCraftServiceHandler) AppendEntries(context.Context, *connect.Request[api.AppendEntriesRequest]) (*connect.Response[api.AppendEntriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("craft.CraftService.AppendEntries is not implemented"))
}
