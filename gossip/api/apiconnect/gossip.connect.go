// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gossip.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/codeharik/gossip/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GossipServiceName is the fully-qualified name of the GossipService service.
	GossipServiceName = "gossip.GossipService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GossipServiceBroadcastMessageProcedure is the fully-qualified name of the GossipService's
	// BroadcastMessage RPC.
	GossipServiceBroadcastMessageProcedure = "/gossip.GossipService/BroadcastMessage"
	// GossipServiceConnectProcedure is the fully-qualified name of the GossipService's Connect RPC.
	GossipServiceConnectProcedure = "/gossip.GossipService/Connect"
)

// GossipServiceClient is a client for the gossip.GossipService service.
type GossipServiceClient interface {
	BroadcastMessage(context.Context, *connect.Request[api.BroadcastRequest]) (*connect.Response[api.BroadcastResponse], error)
	Connect(context.Context, *connect.Request[api.ConnectRequest]) (*connect.Response[api.ConnectResponse], error)
}

// NewGossipServiceClient constructs a client for the gossip.GossipService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGossipServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GossipServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gossipServiceMethods := api.File_gossip_proto.Services().ByName("GossipService").Methods()
	return &gossipServiceClient{
		broadcastMessage: connect.NewClient[api.BroadcastRequest, api.BroadcastResponse](
			httpClient,
			baseURL+GossipServiceBroadcastMessageProcedure,
			connect.WithSchema(gossipServiceMethods.ByName("BroadcastMessage")),
			connect.WithClientOptions(opts...),
		),
		connect: connect.NewClient[api.ConnectRequest, api.ConnectResponse](
			httpClient,
			baseURL+GossipServiceConnectProcedure,
			connect.WithSchema(gossipServiceMethods.ByName("Connect")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gossipServiceClient implements GossipServiceClient.
type gossipServiceClient struct {
	broadcastMessage *connect.Client[api.BroadcastRequest, api.BroadcastResponse]
	connect          *connect.Client[api.ConnectRequest, api.ConnectResponse]
}

// BroadcastMessage calls gossip.GossipService.BroadcastMessage.
func (c *gossipServiceClient) BroadcastMessage(ctx context.Context, req *connect.Request[api.BroadcastRequest]) (*connect.Response[api.BroadcastResponse], error) {
	return c.broadcastMessage.CallUnary(ctx, req)
}

// Connect calls gossip.GossipService.Connect.
func (c *gossipServiceClient) Connect(ctx context.Context, req *connect.Request[api.ConnectRequest]) (*connect.Response[api.ConnectResponse], error) {
	return c.connect.CallUnary(ctx, req)
}

// GossipServiceHandler is an implementation of the gossip.GossipService service.
type GossipServiceHandler interface {
	BroadcastMessage(context.Context, *connect.Request[api.BroadcastRequest]) (*connect.Response[api.BroadcastResponse], error)
	Connect(context.Context, *connect.Request[api.ConnectRequest]) (*connect.Response[api.ConnectResponse], error)
}

// NewGossipServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGossipServiceHandler(svc GossipServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gossipServiceMethods := api.File_gossip_proto.Services().ByName("GossipService").Methods()
	gossipServiceBroadcastMessageHandler := connect.NewUnaryHandler(
		GossipServiceBroadcastMessageProcedure,
		svc.BroadcastMessage,
		connect.WithSchema(gossipServiceMethods.ByName("BroadcastMessage")),
		connect.WithHandlerOptions(opts...),
	)
	gossipServiceConnectHandler := connect.NewUnaryHandler(
		GossipServiceConnectProcedure,
		svc.Connect,
		connect.WithSchema(gossipServiceMethods.ByName("Connect")),
		connect.WithHandlerOptions(opts...),
	)
	return "/gossip.GossipService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GossipServiceBroadcastMessageProcedure:
			gossipServiceBroadcastMessageHandler.ServeHTTP(w, r)
		case GossipServiceConnectProcedure:
			gossipServiceConnectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGossipServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGossipServiceHandler struct{}

func (UnimplementedGossipServiceHandler) BroadcastMessage(context.Context, *connect.Request[api.BroadcastRequest]) (*connect.Response[api.BroadcastResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gossip.GossipService.BroadcastMessage is not implemented"))
}

func (UnimplementedGossipServiceHandler) Connect(context.Context, *connect.Request[api.ConnectRequest]) (*connect.Response[api.ConnectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gossip.GossipService.Connect is not implemented"))
}
