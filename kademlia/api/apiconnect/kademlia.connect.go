// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kademlia.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/codeharik/kademlia/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KademliaName is the fully-qualified name of the Kademlia service.
	KademliaName = "kademlia.Kademlia"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KademliaPingProcedure is the fully-qualified name of the Kademlia's Ping RPC.
	KademliaPingProcedure = "/kademlia.Kademlia/Ping"
	// KademliaJoinProcedure is the fully-qualified name of the Kademlia's Join RPC.
	KademliaJoinProcedure = "/kademlia.Kademlia/Join"
	// KademliaFindNodeProcedure is the fully-qualified name of the Kademlia's FindNode RPC.
	KademliaFindNodeProcedure = "/kademlia.Kademlia/FindNode"
	// KademliaGetContactsProcedure is the fully-qualified name of the Kademlia's GetContacts RPC.
	KademliaGetContactsProcedure = "/kademlia.Kademlia/GetContacts"
	// KademliaStoreProcedure is the fully-qualified name of the Kademlia's Store RPC.
	KademliaStoreProcedure = "/kademlia.Kademlia/Store"
	// KademliaFindValueProcedure is the fully-qualified name of the Kademlia's FindValue RPC.
	KademliaFindValueProcedure = "/kademlia.Kademlia/FindValue"
)

// KademliaClient is a client for the kademlia.Kademlia service.
type KademliaClient interface {
	Ping(context.Context, *connect.Request[api.PingRequest]) (*connect.Response[api.PingResponse], error)
	Join(context.Context, *connect.Request[api.JoinRequest]) (*connect.Response[api.JoinResponse], error)
	FindNode(context.Context, *connect.Request[api.FindNodeRequest]) (*connect.Response[api.FindNodeResponse], error)
	GetContacts(context.Context, *connect.Request[api.GetContactsRequest]) (*connect.Response[api.GetContactsResponse], error)
	Store(context.Context, *connect.Request[api.StoreRequest]) (*connect.Response[api.StoreResponse], error)
	FindValue(context.Context, *connect.Request[api.FindValueRequest]) (*connect.Response[api.FindValueResponse], error)
}

// NewKademliaClient constructs a client for the kademlia.Kademlia service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKademliaClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KademliaClient {
	baseURL = strings.TrimRight(baseURL, "/")
	kademliaMethods := api.File_kademlia_proto.Services().ByName("Kademlia").Methods()
	return &kademliaClient{
		ping: connect.NewClient[api.PingRequest, api.PingResponse](
			httpClient,
			baseURL+KademliaPingProcedure,
			connect.WithSchema(kademliaMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		join: connect.NewClient[api.JoinRequest, api.JoinResponse](
			httpClient,
			baseURL+KademliaJoinProcedure,
			connect.WithSchema(kademliaMethods.ByName("Join")),
			connect.WithClientOptions(opts...),
		),
		findNode: connect.NewClient[api.FindNodeRequest, api.FindNodeResponse](
			httpClient,
			baseURL+KademliaFindNodeProcedure,
			connect.WithSchema(kademliaMethods.ByName("FindNode")),
			connect.WithClientOptions(opts...),
		),
		getContacts: connect.NewClient[api.GetContactsRequest, api.GetContactsResponse](
			httpClient,
			baseURL+KademliaGetContactsProcedure,
			connect.WithSchema(kademliaMethods.ByName("GetContacts")),
			connect.WithClientOptions(opts...),
		),
		store: connect.NewClient[api.StoreRequest, api.StoreResponse](
			httpClient,
			baseURL+KademliaStoreProcedure,
			connect.WithSchema(kademliaMethods.ByName("Store")),
			connect.WithClientOptions(opts...),
		),
		findValue: connect.NewClient[api.FindValueRequest, api.FindValueResponse](
			httpClient,
			baseURL+KademliaFindValueProcedure,
			connect.WithSchema(kademliaMethods.ByName("FindValue")),
			connect.WithClientOptions(opts...),
		),
	}
}

// kademliaClient implements KademliaClient.
type kademliaClient struct {
	ping        *connect.Client[api.PingRequest, api.PingResponse]
	join        *connect.Client[api.JoinRequest, api.JoinResponse]
	findNode    *connect.Client[api.FindNodeRequest, api.FindNodeResponse]
	getContacts *connect.Client[api.GetContactsRequest, api.GetContactsResponse]
	store       *connect.Client[api.StoreRequest, api.StoreResponse]
	findValue   *connect.Client[api.FindValueRequest, api.FindValueResponse]
}

// Ping calls kademlia.Kademlia.Ping.
func (c *kademliaClient) Ping(ctx context.Context, req *connect.Request[api.PingRequest]) (*connect.Response[api.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// Join calls kademlia.Kademlia.Join.
func (c *kademliaClient) Join(ctx context.Context, req *connect.Request[api.JoinRequest]) (*connect.Response[api.JoinResponse], error) {
	return c.join.CallUnary(ctx, req)
}

// FindNode calls kademlia.Kademlia.FindNode.
func (c *kademliaClient) FindNode(ctx context.Context, req *connect.Request[api.FindNodeRequest]) (*connect.Response[api.FindNodeResponse], error) {
	return c.findNode.CallUnary(ctx, req)
}

// GetContacts calls kademlia.Kademlia.GetContacts.
func (c *kademliaClient) GetContacts(ctx context.Context, req *connect.Request[api.GetContactsRequest]) (*connect.Response[api.GetContactsResponse], error) {
	return c.getContacts.CallUnary(ctx, req)
}

// Store calls kademlia.Kademlia.Store.
func (c *kademliaClient) Store(ctx context.Context, req *connect.Request[api.StoreRequest]) (*connect.Response[api.StoreResponse], error) {
	return c.store.CallUnary(ctx, req)
}

// FindValue calls kademlia.Kademlia.FindValue.
func (c *kademliaClient) FindValue(ctx context.Context, req *connect.Request[api.FindValueRequest]) (*connect.Response[api.FindValueResponse], error) {
	return c.findValue.CallUnary(ctx, req)
}

// KademliaHandler is an implementation of the kademlia.Kademlia service.
type KademliaHandler interface {
	Ping(context.Context, *connect.Request[api.PingRequest]) (*connect.Response[api.PingResponse], error)
	Join(context.Context, *connect.Request[api.JoinRequest]) (*connect.Response[api.JoinResponse], error)
	FindNode(context.Context, *connect.Request[api.FindNodeRequest]) (*connect.Response[api.FindNodeResponse], error)
	GetContacts(context.Context, *connect.Request[api.GetContactsRequest]) (*connect.Response[api.GetContactsResponse], error)
	Store(context.Context, *connect.Request[api.StoreRequest]) (*connect.Response[api.StoreResponse], error)
	FindValue(context.Context, *connect.Request[api.FindValueRequest]) (*connect.Response[api.FindValueResponse], error)
}

// NewKademliaHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKademliaHandler(svc KademliaHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kademliaMethods := api.File_kademlia_proto.Services().ByName("Kademlia").Methods()
	kademliaPingHandler := connect.NewUnaryHandler(
		KademliaPingProcedure,
		svc.Ping,
		connect.WithSchema(kademliaMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	kademliaJoinHandler := connect.NewUnaryHandler(
		KademliaJoinProcedure,
		svc.Join,
		connect.WithSchema(kademliaMethods.ByName("Join")),
		connect.WithHandlerOptions(opts...),
	)
	kademliaFindNodeHandler := connect.NewUnaryHandler(
		KademliaFindNodeProcedure,
		svc.FindNode,
		connect.WithSchema(kademliaMethods.ByName("FindNode")),
		connect.WithHandlerOptions(opts...),
	)
	kademliaGetContactsHandler := connect.NewUnaryHandler(
		KademliaGetContactsProcedure,
		svc.GetContacts,
		connect.WithSchema(kademliaMethods.ByName("GetContacts")),
		connect.WithHandlerOptions(opts...),
	)
	kademliaStoreHandler := connect.NewUnaryHandler(
		KademliaStoreProcedure,
		svc.Store,
		connect.WithSchema(kademliaMethods.ByName("Store")),
		connect.WithHandlerOptions(opts...),
	)
	kademliaFindValueHandler := connect.NewUnaryHandler(
		KademliaFindValueProcedure,
		svc.FindValue,
		connect.WithSchema(kademliaMethods.ByName("FindValue")),
		connect.WithHandlerOptions(opts...),
	)
	return "/kademlia.Kademlia/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KademliaPingProcedure:
			kademliaPingHandler.ServeHTTP(w, r)
		case KademliaJoinProcedure:
			kademliaJoinHandler.ServeHTTP(w, r)
		case KademliaFindNodeProcedure:
			kademliaFindNodeHandler.ServeHTTP(w, r)
		case KademliaGetContactsProcedure:
			kademliaGetContactsHandler.ServeHTTP(w, r)
		case KademliaStoreProcedure:
			kademliaStoreHandler.ServeHTTP(w, r)
		case KademliaFindValueProcedure:
			kademliaFindValueHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKademliaHandler returns CodeUnimplemented from all methods.
type UnimplementedKademliaHandler struct{}

func (UnimplementedKademliaHandler) Ping(context.Context, *connect.Request[api.PingRequest]) (*connect.Response[api.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kademlia.Kademlia.Ping is not implemented"))
}

func (UnimplementedKademliaHandler) Join(context.Context, *connect.Request[api.JoinRequest]) (*connect.Response[api.JoinResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kademlia.Kademlia.Join is not implemented"))
}

func (UnimplementedKademliaHandler) FindNode(context.Context, *connect.Request[api.FindNodeRequest]) (*connect.Response[api.FindNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kademlia.Kademlia.FindNode is not implemented"))
}

func (UnimplementedKademliaHandler) GetContacts(context.Context, *connect.Request[api.GetContactsRequest]) (*connect.Response[api.GetContactsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kademlia.Kademlia.GetContacts is not implemented"))
}

func (UnimplementedKademliaHandler) Store(context.Context, *connect.Request[api.StoreRequest]) (*connect.Response[api.StoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kademlia.Kademlia.Store is not implemented"))
}

func (UnimplementedKademliaHandler) FindValue(context.Context, *connect.Request[api.FindValueRequest]) (*connect.Response[api.FindValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kademlia.Kademlia.FindValue is not implemented"))
}
