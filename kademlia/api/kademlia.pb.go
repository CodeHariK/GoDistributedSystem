// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: kademlia.proto

package api

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KKey) Reset() {
	*x = KKey{}
	mi := &file_kademlia_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KKey) ProtoMessage() {}

func (x *KKey) ProtoReflect() protoreflect.Message {
	mi := &file_kademlia_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KKey.ProtoReflect.Descriptor instead.
func (*KKey) Descriptor() ([]byte, []int) {
	return file_kademlia_proto_rawDescGZIP(), []int{0}
}

func (x *KKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type Contact struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        *KKey                  `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Ip            string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port          int32                  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Contact) Reset() {
	*x = Contact{}
	mi := &file_kademlia_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_kademlia_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_kademlia_proto_rawDescGZIP(), []int{1}
}

func (x *Contact) GetNodeId() *KKey {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *Contact) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Contact) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        *KKey                  `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Ip            string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port          int32                  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_kademlia_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kademlia_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_kademlia_proto_rawDescGZIP(), []int{2}
}

func (x *PingRequest) GetNodeId() *KKey {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *PingRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PingRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_kademlia_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kademlia_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_kademlia_proto_rawDescGZIP(), []int{3}
}

func (x *PingResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type FindNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetId      *KKey                  `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindNodeRequest) Reset() {
	*x = FindNodeRequest{}
	mi := &file_kademlia_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNodeRequest) ProtoMessage() {}

func (x *FindNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kademlia_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNodeRequest.ProtoReflect.Descriptor instead.
func (*FindNodeRequest) Descriptor() ([]byte, []int) {
	return file_kademlia_proto_rawDescGZIP(), []int{4}
}

func (x *FindNodeRequest) GetTargetId() *KKey {
	if x != nil {
		return x.TargetId
	}
	return nil
}

type FindNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Contacts      []*Contact             `protobuf:"bytes,1,rep,name=contacts,proto3" json:"contacts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindNodeResponse) Reset() {
	*x = FindNodeResponse{}
	mi := &file_kademlia_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNodeResponse) ProtoMessage() {}

func (x *FindNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kademlia_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNodeResponse.ProtoReflect.Descriptor instead.
func (*FindNodeResponse) Descriptor() ([]byte, []int) {
	return file_kademlia_proto_rawDescGZIP(), []int{5}
}

func (x *FindNodeResponse) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

type StoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *KKey                  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreRequest) Reset() {
	*x = StoreRequest{}
	mi := &file_kademlia_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreRequest) ProtoMessage() {}

func (x *StoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kademlia_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreRequest.ProtoReflect.Descriptor instead.
func (*StoreRequest) Descriptor() ([]byte, []int) {
	return file_kademlia_proto_rawDescGZIP(), []int{6}
}

func (x *StoreRequest) GetKey() *KKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StoreRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type StoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreResponse) Reset() {
	*x = StoreResponse{}
	mi := &file_kademlia_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreResponse) ProtoMessage() {}

func (x *StoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kademlia_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreResponse.ProtoReflect.Descriptor instead.
func (*StoreResponse) Descriptor() ([]byte, []int) {
	return file_kademlia_proto_rawDescGZIP(), []int{7}
}

func (x *StoreResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type FindValueRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *KKey                  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindValueRequest) Reset() {
	*x = FindValueRequest{}
	mi := &file_kademlia_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindValueRequest) ProtoMessage() {}

func (x *FindValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kademlia_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindValueRequest.ProtoReflect.Descriptor instead.
func (*FindValueRequest) Descriptor() ([]byte, []int) {
	return file_kademlia_proto_rawDescGZIP(), []int{8}
}

func (x *FindValueRequest) GetKey() *KKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type FindValueResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*FindValueResponse_Value
	//	*FindValueResponse_Nodes
	Response      isFindValueResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindValueResponse) Reset() {
	*x = FindValueResponse{}
	mi := &file_kademlia_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindValueResponse) ProtoMessage() {}

func (x *FindValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kademlia_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindValueResponse.ProtoReflect.Descriptor instead.
func (*FindValueResponse) Descriptor() ([]byte, []int) {
	return file_kademlia_proto_rawDescGZIP(), []int{9}
}

func (x *FindValueResponse) GetResponse() isFindValueResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *FindValueResponse) GetValue() []byte {
	if x != nil {
		if x, ok := x.Response.(*FindValueResponse_Value); ok {
			return x.Value
		}
	}
	return nil
}

func (x *FindValueResponse) GetNodes() *FindNodeResponse {
	if x != nil {
		if x, ok := x.Response.(*FindValueResponse_Nodes); ok {
			return x.Nodes
		}
	}
	return nil
}

type isFindValueResponse_Response interface {
	isFindValueResponse_Response()
}

type FindValueResponse_Value struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3,oneof"` // Value found
}

type FindValueResponse_Nodes struct {
	Nodes *FindNodeResponse `protobuf:"bytes,2,opt,name=nodes,proto3,oneof"` // Closest nodes if value is not found
}

func (*FindValueResponse_Value) isFindValueResponse_Response() {}

func (*FindValueResponse_Nodes) isFindValueResponse_Response() {}

var File_kademlia_proto protoreflect.FileDescriptor

var file_kademlia_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x18, 0x0a, 0x04, 0x4b, 0x4b, 0x65, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x56, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x2e, 0x4b, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x5a, 0x0a, 0x0b, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x64, 0x65,
	0x6d, 0x6c, 0x69, 0x61, 0x2e, 0x4b, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x26, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3e, 0x0a,
	0x0f, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x2e, 0x4b,
	0x4b, 0x65, 0x79, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x41, 0x0a,
	0x10, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x22, 0x46, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x2e, 0x4b, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x27, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x34, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x2e, 0x4b, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x6b, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x84, 0x02, 0x0a, 0x08, 0x4b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69,
	0x61, 0x12, 0x35, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x2e, 0x6b, 0x61, 0x64, 0x65,
	0x6d, 0x6c, 0x69, 0x61, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x2e, 0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6b,
	0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1a, 0x2e, 0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x80, 0x01, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x42, 0x0d, 0x4b, 0x61,
	0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x21, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x68, 0x61,
	0x72, 0x69, 0x6b, 0x2f, 0x6b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x2f, 0x61, 0x70, 0x69,
	0xa2, 0x02, 0x03, 0x4b, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x4b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69,
	0x61, 0xca, 0x02, 0x08, 0x4b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0xe2, 0x02, 0x14, 0x4b,
	0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x4b, 0x61, 0x64, 0x65, 0x6d, 0x6c, 0x69, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_kademlia_proto_rawDescOnce sync.Once
	file_kademlia_proto_rawDescData []byte
)

func file_kademlia_proto_rawDescGZIP() []byte {
	file_kademlia_proto_rawDescOnce.Do(func() {
		file_kademlia_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kademlia_proto_rawDesc), len(file_kademlia_proto_rawDesc)))
	})
	return file_kademlia_proto_rawDescData
}

var file_kademlia_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_kademlia_proto_goTypes = []any{
	(*KKey)(nil),              // 0: kademlia.KKey
	(*Contact)(nil),           // 1: kademlia.Contact
	(*PingRequest)(nil),       // 2: kademlia.PingRequest
	(*PingResponse)(nil),      // 3: kademlia.PingResponse
	(*FindNodeRequest)(nil),   // 4: kademlia.FindNodeRequest
	(*FindNodeResponse)(nil),  // 5: kademlia.FindNodeResponse
	(*StoreRequest)(nil),      // 6: kademlia.StoreRequest
	(*StoreResponse)(nil),     // 7: kademlia.StoreResponse
	(*FindValueRequest)(nil),  // 8: kademlia.FindValueRequest
	(*FindValueResponse)(nil), // 9: kademlia.FindValueResponse
}
var file_kademlia_proto_depIdxs = []int32{
	0,  // 0: kademlia.Contact.node_id:type_name -> kademlia.KKey
	0,  // 1: kademlia.PingRequest.node_id:type_name -> kademlia.KKey
	0,  // 2: kademlia.FindNodeRequest.target_id:type_name -> kademlia.KKey
	1,  // 3: kademlia.FindNodeResponse.contacts:type_name -> kademlia.Contact
	0,  // 4: kademlia.StoreRequest.key:type_name -> kademlia.KKey
	0,  // 5: kademlia.FindValueRequest.key:type_name -> kademlia.KKey
	5,  // 6: kademlia.FindValueResponse.nodes:type_name -> kademlia.FindNodeResponse
	2,  // 7: kademlia.Kademlia.Ping:input_type -> kademlia.PingRequest
	4,  // 8: kademlia.Kademlia.FindNode:input_type -> kademlia.FindNodeRequest
	6,  // 9: kademlia.Kademlia.Store:input_type -> kademlia.StoreRequest
	8,  // 10: kademlia.Kademlia.FindValue:input_type -> kademlia.FindValueRequest
	3,  // 11: kademlia.Kademlia.Ping:output_type -> kademlia.PingResponse
	5,  // 12: kademlia.Kademlia.FindNode:output_type -> kademlia.FindNodeResponse
	7,  // 13: kademlia.Kademlia.Store:output_type -> kademlia.StoreResponse
	9,  // 14: kademlia.Kademlia.FindValue:output_type -> kademlia.FindValueResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_kademlia_proto_init() }
func file_kademlia_proto_init() {
	if File_kademlia_proto != nil {
		return
	}
	file_kademlia_proto_msgTypes[9].OneofWrappers = []any{
		(*FindValueResponse_Value)(nil),
		(*FindValueResponse_Nodes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kademlia_proto_rawDesc), len(file_kademlia_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kademlia_proto_goTypes,
		DependencyIndexes: file_kademlia_proto_depIdxs,
		MessageInfos:      file_kademlia_proto_msgTypes,
	}.Build()
	File_kademlia_proto = out.File
	file_kademlia_proto_goTypes = nil
	file_kademlia_proto_depIdxs = nil
}
